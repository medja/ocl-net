using System;
using OCL.Net.Internal;
using OCL.Net.Native.Enums;
using OCL.Net.Native.Structures;

namespace OCL.Net
{
    public sealed partial class Device
    {
        public uint AddressBits => LoadValue(DeviceInfo.DeviceAddressBits, ref _addressBits);
        public bool Available => LoadValue(DeviceInfo.DeviceAvailable, ref _available);
        public string[] BuiltInKernels => LoadString(DeviceInfo.DeviceBuiltInKernels, ref _builtInKernels).Split(';');
        public bool CompilerAvailable => LoadValue(DeviceInfo.DeviceCompilerAvailable, ref _compilerAvailable);
        public DeviceFpConfig DoubleFpConfig => LoadValue(DeviceInfo.DeviceDoubleFpConfig, ref _doubleFpConfig);
        public string DriverVersion => LoadString(DeviceInfo.DriverVersion, ref _driverVersion);
        public bool EndianLittle => LoadValue(DeviceInfo.DeviceEndianLittle, ref _endianLittle);
        public bool ErrorCorrectionSupport => LoadValue(DeviceInfo.DeviceErrorCorrectionSupport, ref _errorCorrectionSupport);
        public DeviceExecCapabilities ExecutionCapabilities => LoadValue(DeviceInfo.DeviceExecutionCapabilities, ref _executionCapabilities);
        public string[] Extensions => LoadString(DeviceInfo.DeviceExtensions, ref _extensions).Split(' ');
        public uint GlobalMemCachelineSize => LoadValue(DeviceInfo.DeviceGlobalMemCachelineSize, ref _globalMemCachelineSize);
        public ulong GlobalMemCacheSize => LoadValue(DeviceInfo.DeviceGlobalMemCacheSize, ref _globalMemCacheSize);
        public DeviceMemCacheType GlobalMemCacheType => LoadValue(DeviceInfo.DeviceGlobalMemCacheType, ref _globalMemCacheType);
        public ulong GlobalMemSize => LoadValue(DeviceInfo.DeviceGlobalMemSize, ref _globalMemSize);
        public DeviceFpConfig HalfFpConfig => LoadValue(DeviceInfo.DeviceHalfFpConfig, ref _halfFpConfig);
        public bool HostUnifiedMemory => LoadValue(DeviceInfo.DeviceHostUnifiedMemory, ref _hostUnifiedMemory);
        public ulong Image2DMaxHeight => LoadValue(DeviceInfo.DeviceImage2DMaxHeight, ref _image2DMaxHeight).ToUInt64();
        public ulong Image2DMaxWidth => LoadValue(DeviceInfo.DeviceImage2DMaxWidth, ref _image2DMaxWidth).ToUInt64();
        public ulong Image3DMaxDepth => LoadValue(DeviceInfo.DeviceImage3DMaxDepth, ref _image3DMaxDepth).ToUInt64();
        public ulong Image3DMaxHeight => LoadValue(DeviceInfo.DeviceImage3DMaxHeight, ref _image3DMaxHeight).ToUInt64();
        public ulong Image3DMaxWidth => LoadValue(DeviceInfo.DeviceImage3DMaxWidth, ref _image3DMaxWidth).ToUInt64();
        public uint ImageBaseAddressAlignment => LoadValue(DeviceInfo.DeviceImageBaseAddressAlignment, ref _imageBaseAddressAlignment);
        public ulong ImageMaxArraySize => LoadValue(DeviceInfo.DeviceImageMaxArraySize, ref _imageMaxArraySize).ToUInt64();
        public ulong ImageMaxBufferSize => LoadValue(DeviceInfo.DeviceImageMaxBufferSize, ref _imageMaxBufferSize).ToUInt64();
        public uint ImagePitchAlignment => LoadValue(DeviceInfo.DeviceImagePitchAlignment, ref _imagePitchAlignment);
        public bool ImageSupport => LoadValue(DeviceInfo.DeviceImageSupport, ref _imageSupport);
        public bool LinkerAvailable => LoadValue(DeviceInfo.DeviceLinkerAvailable, ref _linkerAvailable);
        public ulong LocalMemSize => LoadValue(DeviceInfo.DeviceLocalMemSize, ref _localMemSize);
        public DeviceLocalMemType LocalMemType => LoadValue(DeviceInfo.DeviceLocalMemType, ref _localMemType);
        public uint MaxClockFrequency => LoadValue(DeviceInfo.DeviceMaxClockFrequency, ref _maxClockFrequency);
        public uint MaxComputeUnits => LoadValue(DeviceInfo.DeviceMaxComputeUnits, ref _maxComputeUnits);
        public uint MaxConstantArgs => LoadValue(DeviceInfo.DeviceMaxConstantArgs, ref _maxConstantArgs);
        public ulong MaxConstantBufferSize => LoadValue(DeviceInfo.DeviceMaxConstantBufferSize, ref _maxConstantBufferSize);
        public ulong MaxMemAllocSize => LoadValue(DeviceInfo.DeviceMaxMemAllocSize, ref _maxMemAllocSize);
        public ulong MaxParameterSize => LoadValue(DeviceInfo.DeviceMaxParameterSize, ref _maxParameterSize).ToUInt64();
        public uint MaxReadImageArgs => LoadValue(DeviceInfo.DeviceMaxReadImageArgs, ref _maxReadImageArgs);
        public uint MaxSamplers => LoadValue(DeviceInfo.DeviceMaxSamplers, ref _maxSamplers);
        public ulong MaxWorkGroupSize => LoadValue(DeviceInfo.DeviceMaxWorkGroupSize, ref _maxWorkGroupSize).ToUInt64();
        public uint MaxWorkItemDimensions => LoadValue(DeviceInfo.DeviceMaxWorkItemDimensions, ref _maxWorkItemDimensions);
        public ulong[] MaxWorkItemSizes => LoadArray(DeviceInfo.DeviceMaxWorkItemSizes, ref _maxWorkItemSizes).Cast<ulong>();
        public uint MaxWriteImageArgs => LoadValue(DeviceInfo.DeviceMaxWriteImageArgs, ref _maxWriteImageArgs);
        public uint MemBaseAddrAlign => LoadValue(DeviceInfo.DeviceMemBaseAddrAlign, ref _memBaseAddrAlign);
        public uint MinDataTypeAlignSize => LoadValue(DeviceInfo.DeviceMinDataTypeAlignSize, ref _minDataTypeAlignSize);
        public string Name => LoadString(DeviceInfo.DeviceName, ref _name);
        public uint NativeVectorWidthChar => LoadValue(DeviceInfo.DeviceNativeVectorWidthChar, ref _nativeVectorWidthChar);
        public uint NativeVectorWidthDouble => LoadValue(DeviceInfo.DeviceNativeVectorWidthDouble, ref _nativeVectorWidthDouble);
        public uint NativeVectorWidthFloat => LoadValue(DeviceInfo.DeviceNativeVectorWidthFloat, ref _nativeVectorWidthFloat);
        public uint NativeVectorWidthHalf => LoadValue(DeviceInfo.DeviceNativeVectorWidthHalf, ref _nativeVectorWidthHalf);
        public uint NativeVectorWidthInt => LoadValue(DeviceInfo.DeviceNativeVectorWidthInt, ref _nativeVectorWidthInt);
        public uint NativeVectorWidthLong => LoadValue(DeviceInfo.DeviceNativeVectorWidthLong, ref _nativeVectorWidthLong);
        public uint NativeVectorWidthShort => LoadValue(DeviceInfo.DeviceNativeVectorWidthShort, ref _nativeVectorWidthShort);
        public string OpenClCVersion => LoadString(DeviceInfo.DeviceOpenClCVersion, ref _openClCVersion);
        public Device ParentDevice => FromId(Library, LoadValue(DeviceInfo.DeviceParentDevice, ref _parentDevice));
        public DeviceAffinityDomain PartitionAffinityDomain => LoadValue(DeviceInfo.DevicePartitionAffinityDomain, ref _partitionAffinityDomain);
        public uint PartitionMaxSubDevices => LoadValue(DeviceInfo.DevicePartitionMaxSubDevices, ref _partitionMaxSubDevices);
        public DevicePartitionProperty[] PartitionProperties => LoadArray(DeviceInfo.DevicePartitionProperties, ref _partitionProperties).Cast<DevicePartitionProperty>();
        public DevicePartitionProperty[] PartitionType => LoadArray(DeviceInfo.DevicePartitionType, ref _partitionType).Cast<DevicePartitionProperty>();
        public Platform Platform => Platform.FromId(Library, LoadValue(DeviceInfo.DevicePlatform, ref _platform));
        public bool PreferredInteropUserSync => LoadValue(DeviceInfo.DevicePreferredInteropUserSync, ref _preferredInteropUserSync);
        public uint PreferredVectorWidthChar => LoadValue(DeviceInfo.DevicePreferredVectorWidthChar, ref _preferredVectorWidthChar);
        public uint PreferredVectorWidthDouble => LoadValue(DeviceInfo.DevicePreferredVectorWidthDouble, ref _preferredVectorWidthDouble);
        public uint PreferredVectorWidthFloat => LoadValue(DeviceInfo.DevicePreferredVectorWidthFloat, ref _preferredVectorWidthFloat);
        public uint PreferredVectorWidthHalf => LoadValue(DeviceInfo.DevicePreferredVectorWidthHalf, ref _preferredVectorWidthHalf);
        public uint PreferredVectorWidthInt => LoadValue(DeviceInfo.DevicePreferredVectorWidthInt, ref _preferredVectorWidthInt);
        public uint PreferredVectorWidthLong => LoadValue(DeviceInfo.DevicePreferredVectorWidthLong, ref _preferredVectorWidthLong);
        public uint PreferredVectorWidthShort => LoadValue(DeviceInfo.DevicePreferredVectorWidthShort, ref _preferredVectorWidthShort);
        public ulong PrintfBufferSize => LoadValue(DeviceInfo.DevicePrintfBufferSize, ref _printfBufferSize).ToUInt64();
        public string Profile => LoadString(DeviceInfo.DeviceProfile, ref _profile);
        public ulong ProfilingTimerResolution => LoadValue(DeviceInfo.DeviceProfilingTimerResolution, ref _profilingTimerResolution).ToUInt64();
        public override uint ReferenceCount => LoadValue<uint>(DeviceInfo.DeviceReferenceCount);
        public CommandQueueProperties QueueProperties => LoadValue(DeviceInfo.DeviceQueueProperties, ref _queueProperties);
        public DeviceFpConfig SingleFpConfig => LoadValue(DeviceInfo.DeviceSingleFpConfig, ref _singleFpConfig);
        public DeviceType Type => LoadValue(DeviceInfo.DeviceType, ref _type);
        public string Vendor => LoadString(DeviceInfo.DeviceVendor, ref _vendor);
        public uint VendorId => LoadValue(DeviceInfo.DeviceVendorId, ref _vendorId);
        public string Version => LoadString(DeviceInfo.DeviceVersion, ref _version);

        private uint? _addressBits;
        private bool? _available;
        private string _builtInKernels;
        private bool? _compilerAvailable;
        private DeviceFpConfig? _doubleFpConfig;
        private string _driverVersion;
        private bool? _endianLittle;
        private bool? _errorCorrectionSupport;
        private DeviceExecCapabilities? _executionCapabilities;
        private string _extensions;
        private uint? _globalMemCachelineSize;
        private ulong? _globalMemCacheSize;
        private DeviceMemCacheType? _globalMemCacheType;
        private ulong? _globalMemSize;
        private DeviceFpConfig? _halfFpConfig;
        private bool? _hostUnifiedMemory;
        private UIntPtr? _image2DMaxHeight;
        private UIntPtr? _image2DMaxWidth;
        private UIntPtr? _image3DMaxDepth;
        private UIntPtr? _image3DMaxHeight;
        private UIntPtr? _image3DMaxWidth;
        private uint? _imageBaseAddressAlignment;
        private UIntPtr? _imageMaxArraySize;
        private UIntPtr? _imageMaxBufferSize;
        private uint? _imagePitchAlignment;
        private bool? _imageSupport;
        private bool? _linkerAvailable;
        private ulong? _localMemSize;
        private DeviceLocalMemType? _localMemType;
        private uint? _maxClockFrequency;
        private uint? _maxComputeUnits;
        private uint? _maxConstantArgs;
        private ulong? _maxConstantBufferSize;
        private ulong? _maxMemAllocSize;
        private UIntPtr? _maxParameterSize;
        private uint? _maxReadImageArgs;
        private uint? _maxSamplers;
        private UIntPtr? _maxWorkGroupSize;
        private uint? _maxWorkItemDimensions;
        private UIntPtr[] _maxWorkItemSizes;
        private uint? _maxWriteImageArgs;
        private uint? _memBaseAddrAlign;
        private uint? _minDataTypeAlignSize;
        private string _name;
        private uint? _nativeVectorWidthChar;
        private uint? _nativeVectorWidthDouble;
        private uint? _nativeVectorWidthFloat;
        private uint? _nativeVectorWidthHalf;
        private uint? _nativeVectorWidthInt;
        private uint? _nativeVectorWidthLong;
        private uint? _nativeVectorWidthShort;
        private string _openClCVersion;
        private DeviceId? _parentDevice;
        private DeviceAffinityDomain? _partitionAffinityDomain;
        private uint? _partitionMaxSubDevices;
        private IntPtr[] _partitionProperties;
        private IntPtr[] _partitionType;
        private PlatformId? _platform;
        private bool? _preferredInteropUserSync;
        private uint? _preferredVectorWidthChar;
        private uint? _preferredVectorWidthDouble;
        private uint? _preferredVectorWidthFloat;
        private uint? _preferredVectorWidthHalf;
        private uint? _preferredVectorWidthInt;
        private uint? _preferredVectorWidthLong;
        private uint? _preferredVectorWidthShort;
        private UIntPtr? _printfBufferSize;
        private string _profile;
        private UIntPtr? _profilingTimerResolution;
        private CommandQueueProperties? _queueProperties;
        private DeviceFpConfig? _singleFpConfig;
        private DeviceType? _type;
        private string _vendor;
        private uint? _vendorId;
        private string _version;
    }
}
